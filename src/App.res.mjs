// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jstat from "jstat";
import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Color from "@texel/color";
import * as JsxRuntime from "react/jsx-runtime";

function rotatePoint(x, y, angle) {
  var cosTheta = Math.cos(angle);
  var sinTheta = Math.sin(angle);
  var xNew = x * cosTheta - y * sinTheta;
  var yNew = x * sinTheta + y * cosTheta;
  return [
          xNew,
          yNew
        ];
}

function updateCanvas(canvas, ctx) {
  var xMax = canvas.width;
  var yMax = canvas.height;
  var angle = 0.3 * 2 * Math.PI;
  for(var i = 0; i <= 1000; ++i){
    var posX = xMax / 2 | 0;
    var posY = yMax / 2 | 0;
    var originalx = Jstat.beta.sample(1.4, 5) * xMax * 0.5;
    var originaly = Jstat.normal.sample(0, 0.2) * xMax * 0.1;
    var match = rotatePoint(originalx, originaly, angle);
    var xSample = Jstat.beta.sample(1.4, 5);
    var radius = xSample * 4 | 0;
    var rgb = Color.convert([
          250,
          1.0,
          0.5
        ], Color.OKHSL, Color.sRGB);
    ctx.fillStyle = Color.RGBToHex(rgb);
    ctx.beginPath();
    ctx.arc((match[0] | 0) + posX | 0, (match[1] | 0) + posY | 0, radius, 0, 2 * Math.PI);
    ctx.fill();
  }
}

function App$CanvasArea(props) {
  var canvasRef = React.useRef(null);
  React.useEffect((function () {
          var canvasDom = canvasRef.current;
          if (canvasDom === null || canvasDom === undefined) {
            canvasDom === null;
          } else {
            var context = canvasDom.getContext("2d");
            canvasDom.width = 500;
            canvasDom.height = 500;
            updateCanvas(canvasDom, context);
          }
        }), [canvasRef.current]);
  return JsxRuntime.jsx("canvas", {
              ref: Caml_option.some(canvasRef)
            });
}

function App(props) {
  React.useState(function () {
        return 0;
      });
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx("div", {
                    children: JsxRuntime.jsx(App$CanvasArea, {}),
                    className: "bg-white w-fit h-fit"
                  }),
              className: "p-6 bg-black min-h-screen"
            });
}

var make = App;

export {
  make ,
}
/* jstat Not a pure module */
