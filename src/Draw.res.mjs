// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jstat from "jstat";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Color from "@texel/color";

var Texel = {};

var Canvas = {};

var Jstat$1 = {};

function makeSeeded(seed) {
  var state = {
    contents: seed
  };
  return function () {
    state.contents = (1103515245 * state.contents + 12345) % -2147483648;
    return -1 * state.contents / -2147483648;
  };
}

var Rng = {
  m: -2147483648,
  a: 1103515245,
  c: 12345,
  makeSeeded: makeSeeded
};

var rng = makeSeeded(1);

Jstat.setRandom(rng);

function rotatePoint(x, y, angle) {
  var cosTheta = Math.cos(angle);
  var sinTheta = Math.sin(angle);
  var xNew = x * cosTheta - y * sinTheta;
  var yNew = x * sinTheta + y * cosTheta;
  return [
          xNew,
          yNew
        ];
}

function random(a, b) {
  return rng() * (b - a) + a;
}

function randomBySample(sample, a, b) {
  return sample * (b - a) + a;
}

function randomInt(a, b) {
  return rng() * (b - a) + a | 0;
}

function makeRandomWindowInt(a, b) {
  var start = randomInt(a, b);
  var end = randomInt(start, b);
  return function () {
    return randomInt(start, end);
  };
}

function makeRandomWindow(a, b) {
  var start = random(a, b);
  var end = random(start, b);
  return function () {
    return random(start, end);
  };
}

function updateCanvas(canvas, ctx) {
  var xMax = canvas.width;
  var yMax = canvas.height;
  var size = xMax > yMax ? xMax : yMax;
  var makeSplats = function (param, param$1, radiusBase, sizeNumScaler) {
    var numSplats = randomInt(param[0], param[1]);
    var startHue = random(0, 360);
    var endHue = random(startHue, 360);
    var getHue = function () {
      return randomBySample(Jstat.beta.sample(1.4, 5), startHue, endHue);
    };
    var valueFloor = random(0.2, 0.7);
    var middleAngle = random(0, 1.0);
    var angleWidth = random(0, 0.2);
    var startAngle = middleAngle - angleWidth;
    var endAngle = middleAngle + angleWidth;
    var numDropWindow = makeRandomWindowInt(param$1[0], param$1[1]);
    var getXOffset = random(0, 1) < 0.4 ? makeRandomWindowInt(0, xMax) : (function () {
          return randomInt(0, xMax);
        });
    var getYOffset = random(0, 1) < 0.4 ? makeRandomWindowInt(0, yMax) : (function () {
          return randomInt(0, yMax);
        });
    for(var _for = 0; _for <= numSplats; ++_for){
      var color = Color.convert([
            getHue(),
            1.0,
            random(valueFloor, 1.0)
          ], Color.OKHSV, Color.sRGB);
      var angle = random(startAngle, endAngle) * 2 * Math.PI;
      var xAlpha = random(2.0, 3.0);
      var yStd = random(0.1, 0.4);
      var xOffset = getXOffset();
      var yOffset = getYOffset();
      var xSizeScaler = random(0.0, 2.0);
      var ySizeScaler = random(0.0, 0.2);
      var numDrops = numDropWindow() * sizeNumScaler | 0;
      for(var _for$1 = 0; _for$1 <= numDrops; ++_for$1){
        var originalx = Jstat.beta.sample(xAlpha, 5) * size * xSizeScaler;
        var originaly = Jstat.normal.sample(0, yStd) * size * ySizeScaler;
        var match = rotatePoint(originalx, originaly, angle);
        var radius = Jstat.beta.sample(1.4, 5) * radiusBase | 0;
        ctx.fillStyle = Color.RGBToHex(color);
        ctx.beginPath();
        ctx.arc((match[0] | 0) + xOffset | 0, (match[1] | 0) + yOffset | 0, radius, 0, 2 * Math.PI);
        ctx.fill();
      }
    }
  };
  var getBgL = function () {
    var x = rng();
    if (x < 0.4) {
      return random(0.0, 0.2);
    } else if (x < 0.6) {
      return random(0.2, 0.8);
    } else {
      return random(0.8, 1.0);
    }
  };
  var bgColor = Color.convert([
        random(0, 360),
        1.0,
        getBgL()
      ], Color.OKHSL, Color.sRGB);
  ctx.fillStyle = Color.RGBToHex(bgColor);
  ctx.fillRect(0, 0, xMax, yMax);
  var dynamicRadiusBase = function () {
    return Jstat.beta.sample(2.5, 17) * random(10, 100);
  };
  var makeRadiusBase = rng() > 0.5 ? (function () {
        return dynamicRadiusBase();
      }) : (function () {
        return dynamicRadiusBase();
      });
  var sizeNumScaler = random(size / 300 * 0.5, size / 300 * 1.5);
  var aSeries = random(0, 1) > 0.1;
  var bSeries = random(0, 1) > 0.5;
  var cSeries = random(0, 1) > 0.2;
  [
          (function () {
              if (aSeries) {
                Core__Array.make(randomInt(1, 3), false).forEach(function (param) {
                      makeSplats([
                            10,
                            500
                          ], [
                            0,
                            1000
                          ], makeRadiusBase(), sizeNumScaler);
                    });
                return ;
              }
              
            }),
          (function () {
              if (bSeries) {
                Core__Array.make(randomInt(1, 5), false).forEach(function (param) {
                      makeSplats([
                            100,
                            200
                          ], [
                            0,
                            100
                          ], makeRadiusBase(), sizeNumScaler);
                    });
                return ;
              }
              
            }),
          (function () {
              if (cSeries || !aSeries && !bSeries) {
                Core__Array.make(randomInt(1, 3), false).forEach(function (param) {
                      makeSplats([
                            10,
                            20
                          ], [
                            0,
                            100
                          ], makeRadiusBase(), sizeNumScaler);
                    });
                return ;
              }
              
            })
        ].map(function (v) {
            return [
                    v,
                    rng()
                  ];
          }).toSorted(function (param, param$1) {
          return param[1] - param$1[1];
        }).forEach(function (param) {
        param[0]();
      });
}

export {
  Texel ,
  Canvas ,
  Jstat$1 as Jstat,
  Rng ,
  rng ,
  rotatePoint ,
  random ,
  randomBySample ,
  randomInt ,
  makeRandomWindowInt ,
  makeRandomWindow ,
  updateCanvas ,
}
/* rng Not a pure module */
